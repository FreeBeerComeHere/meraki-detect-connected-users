AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  AWS SAM template that defines a Lambda function with a DynamoDB backend,
  exposed through API Gateway and accessible via a custom domain on CloudFront.

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tags:
      project: !Ref ProjectName

Parameters:
  ProjectName:
    Type: String
  ProjectDescription:
    Type: String
  AcmCertificateArn:
    Type: String
  SnsTopicForErrorReportingArn:
    Type: String
    Description: ARN of the SNS topic for error reporting
  ProjectFqdn:
    Type: String
    Description: Fully qualified domain name of the project (e.g. home.example.com)
  PersonsOfInterest:
    Type: String
    Description: List of persons we want to show in the UI, will be used as Lambda environment variable
  PersonsOfInterestDeviceIds:
    Type: String
    Description: List of device IDs of PersonsOfInterest
  MerakiNetworkId:
    Type: String
    Description: Meraki network ID, will be used as Lambda environment variable
  MerakiApiKeySecretName:
    Type: String
    Description: Name of the AWS Secrets Manager secret that contains the Meraki API key
  MerakiApiKeySecretArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret that contains the Meraki API key
  MerakiApiKeySecretRegion:
    Type: String
    Description: Region of the AWS Secrets Manager secret that contains the Meraki API key

  PushsaferSecretName:
    Type: String
    Description: Name of the AWS Secrets Manager secret that contains the PushSafer API key
  PushsaferSecretArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret that contains the PushSafer API key
  PushsaferSecretRegion:
    Type: String
    Description: Region of the AWS Secrets Manager secret that contains the PushSafer API key

Resources:
  # HttpApiGateway:
  #   Type: AWS::Serverless::HttpApi
  #   Properties:
  #     Name: !Ref ProjectName
  #     Description: !Sub '${ProjectDescription} HTTP API gateway'

  S3Bucket:
    Type: AWS::S3::Bucket
    # The S3 bucket where the HTML content is stored
    Properties:
      BucketName: !Sub '${ProjectDescription}-website-bucket'
      
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectDescription}-dynamodb'
      AttributeDefinitions:
      - AttributeName: person_name
        AttributeType: S
      KeySchema:
        - AttributeName: person_name
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

  LambdaFunctionMerakiApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectDescription}-meraki-api-connect'
      CodeUri: meraki-api-connector/
      Handler: main.handler
      Runtime: python3.12
      Timeout: 30
      Architectures:
        - arm64
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          MERAKI_API_KEY_SECRET_NAME: !Ref MerakiApiKeySecretName
          MERAKI_API_KEY_SECRET_REGION: !Ref MerakiApiKeySecretRegion
          MERAKI_NETWORK_ID: !Ref MerakiNetworkId
          SNS_TOPIC_ARN: !Ref SnsTopicForErrorReportingArn
          PERSONS_OF_INTEREST: !Ref PersonsOfInterest
          PERSONS_OF_INTEREST_DEVICE_IDS: !Ref PersonsOfInterestDeviceIds
          S3_BUCKET_NAME: !Ref S3Bucket
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Sid: DDBAllowCRUPolicy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:PutItem
              Resource: !GetAtt DynamoDBTable.Arn
            - Sid: SNSPublishMessagePolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref SnsTopicForErrorReportingArn
            - Sid: SecretsManagerGetSecretValuePolicy
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref MerakiApiKeySecretArn
            - Sid: S3Policy
              Effect: Allow
              Action:
                - s3:*
              Resource:
              - !GetAtt S3Bucket.Arn
              - !Sub "${S3Bucket.Arn}/*"
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SNS
            Destination: !Ref SnsTopicForErrorReportingArn
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: "rate(1 minute)"
            Name: !Sub '${ProjectDescription}-eventbridge-trigger'
            Description: "Triggers every minute"
            Enabled: true

  LambdaFunctionInform:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectDescription}-meraki-inform'
      CodeUri: pushsafer-informer/
      Handler: main.handler
      Runtime: python3.12
      Timeout: 30
      Architectures:
        - arm64
      Environment:
        Variables:
          PUSHSAFER_SECRET_NAME: !Ref PushsaferSecretName
          PUSHSAFER_SECRET_REGION: !Ref PushsaferSecretRegion
          TABLE_NAME: !Ref DynamoDBTable
          SNS_TOPIC_ARN: !Ref SnsTopicForErrorReportingArn
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Sid: SNSPublishMessagePolicy
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref SnsTopicForErrorReportingArn
            - Sid: SecretsManagerGetSecretValuePolicy
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref PushsaferSecretArn
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SNS
            Destination: !Ref SnsTopicForErrorReportingArn
      Events:
        DDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBTable.StreamArn
            StartingPosition: LATEST
            Enabled: true

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${ProjectDescription} OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Logging:
          Bucket: pvr-access-logs.s3.amazonaws.com
          Prefix: !Ref ProjectFqdn
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        Comment: !Ref ProjectName
        Enabled: true
        Origins:
          # - Id: LambdaOrigin
          #   DomainName: !Sub "${HttpApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
          #   CustomOriginConfig:
          #     OriginProtocolPolicy: https-only
          #     OriginSSLProtocols: 
          #       - TLSv1.2
          - Id: S3Origin
            DomainName: !Sub "${S3Bucket}.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
          Compress: true
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
        Aliases:
          - !Ref ProjectFqdn

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
            - s3:GetObject
            Resource: !Sub "${S3Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudfrontDistribution}"

Outputs:
  CloudFrontDistributionDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudfrontDistribution.DomainName
  DynamoDBTableStreamArn:
    Description: ARN of the DynamoDB table stream
    Value: !GetAtt DynamoDBTable.StreamArn